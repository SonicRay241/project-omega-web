// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String          @id @default(uuid())
  name        String
  sellerId    String
  rating      Float
  description String          @db.LongText
  variants    Variant[]
  images      ProductImages[]
  productCart ProductCart[]

  user User @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model ProductImages {
  id        String @id @default(uuid())
  productId String
  base64    String @db.LongText

  Product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Variant {
  id          String        @id @default(uuid())
  productId   String
  name        String
  price       Int
  productCart ProductCart[]

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model User {
  id           String @id @default(uuid())
  name         String
  passwordHash String

  products     Product[]
  productCarts ProductCart[]
  tokens       Token[]
}

model Token {
  id     String @id @default(uuid())
  userId String @default(uuid())
  
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProductCart {
  id        String @id @default(uuid())
  productId String
  userId    String // For cart owner
  variantId String
  count     Int

  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  Variant Variant @relation(fields: [variantId], references: [id])
}
